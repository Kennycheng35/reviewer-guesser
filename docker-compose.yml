version: '3.8'
services:
  db:
    image: postgres:latest
    container_name: movie-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db_scripts:/docker-entrypoint-initdb.d/
    networks:
      - app-net
    restart: unless-stopped
  redis-movie:
    image: redis:latest
    container_name: movie-of-day
    ports:
      - "6379:6379"
    command: [
      "redis-server",
      "--requirepass", "${REDIS_MOVIE_PASSWORD}",
      "--bind", "0.0.0.0",
      "--protected-mode", "yes"
    ]
    networks:
      - app-net
    restart: unless-stopped
  redis-bullmq:
    image: redis:latest
    container_name: redis-bullmq
    ports:
      - "6380:6379"
    command: [
      "redis-server",
      "--requirepass", "${REDIS_BULLMQ_PASSWORD}",
      "--bind", "0.0.0.0",
      "--port", "6380",          # <<< Tell Redis to listen on port 6380
      "--protected-mode", "yes"
    ]
    networks:
      - app-net
    restart: unless-stopped
  api:
    build: 
      context: .
      dockerfile: ./api/Dockerfile
    expose:
      - "${BACKEND_PORT:-3000}" 
    restart: unless-stopped
    depends_on:
      - db
      - redis-movie
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${BACKEND_PORT:-3000} 
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db    
      - REDIS_MOVIE_HOST=redis-movie
      - REDIS_MOVIE_PORT=6379
      - REDIS_MOVIE_PASSWORD=${REDIS_MOVIE_PASSWORD}
    networks:
      - app-net
    deploy: 
      replicas: 4
  reverse-proxy:
    image: nginx:stable-alpine
    container_name: guesser-reverse-proxy-local
    restart: unless-stopped
    ports: ["80:80", "443:443"]
    volumes:
      - ./nginx-proxy/nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app-net
    depends_on: 
      - api

  backend-scheduler:
    build: 
      context: .  # Build context is the project root directory
      dockerfile: ./jobs/Dockerfile # Path to the Jobs' Dockerfile
    command: ["node", "jobs/cron/scheduler.js"]
    container_name: backend-scheduler
    restart: unless-stopped
    depends_on:
      - db
      - redis-movie
      - redis-bullmq
    networks:
      - app-net
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db    
      - REDIS_MOVIE_HOST=redis-movie
      - REDIS_MOVIE_PORT=6379
      - REDIS_MOVIE_PASSWORD=${REDIS_MOVIE_PASSWORD}
      - REDIS_BULLMQ_HOST=redis-bullmq
      - REDIS_BULLMQ_PORT=6380
      - REDIS_BULLMQ_PASSWORD=${REDIS_BULLMQ_PASSWORD}
  backend-worker:
    build: 
      context: .  # Build context is the project root directory
      dockerfile: ./jobs/Dockerfile # Path to the Jobs' Dockerfile
    command: ["node", "jobs/cron/worker.js"]
    container_name: backend-worker
    restart: unless-stopped
    depends_on:
      - db
      - redis-movie
      - redis-bullmq
    networks:
      - app-net
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db    
      - REDIS_MOVIE_HOST=redis-movie
      - REDIS_MOVIE_PORT=6379
      - REDIS_MOVIE_PASSWORD=${REDIS_MOVIE_PASSWORD}
      - REDIS_BULLMQ_HOST=redis-bullmq
      - REDIS_BULLMQ_PORT=6380
      - REDIS_BULLMQ_PASSWORD=${REDIS_BULLMQ_PASSWORD}
  frontend:
    image: kennycheng35/review-guesser:v1.0.0
    container_name: review-guesser-frontend
    restart: unless-stopped
    networks:
      - app-net 
    expose:
      - "80"
    environment:
      - NGINX_IPV6_DISABLE=1
networks:
  app-net:
    driver: bridge

volumes:
  pgdata:
  letsencrypt_certs:
  letsencrypt_webroot:
