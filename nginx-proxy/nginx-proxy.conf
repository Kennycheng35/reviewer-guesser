# Define an upstream block pointing to your scaled service
# Docker's internal DNS will resolve 'api' to the container IPs
upstream backend_servers {
    # 'api' is the service name in docker-compose.yml
    # 8000 is the port the app listens on *inside* the api containers
    server api:3000;
}

server {
    listen 80;
    listen [::]:80; # Listen on IPv6 as well
    
    server_name localhost; # Or localhost if testing

    location /api {
        proxy_pass http://backend_servers; # Pass to the backend upstream

        # Standard proxy headers
        proxy_set_header Host $host; # Passes 'localhost'
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Will be 'http'

        # Optional: Headers for WebSocket support
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection "upgrade";
    }

    location / {
        # Return 404 as there is no frontend configured
        return 404 "Not Found - No Frontend Configured";
    }
    # Add locations for static files, HTTPS config etc. as needed
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
}

